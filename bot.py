import os
import json
import threading
from datetime import datetime
from flask import Flask
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton

TOKEN = os.getenv("TOKEN")
if not TOKEN:
    print("ERROR: TOKEN not set")
    exit(1)

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add(KeyboardButton("–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"))
main_kb.add(KeyboardButton("–ú–æ–π –æ—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è"))
main_kb.add(KeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–µ–Ω—å"))

# –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
PROJECTS = ["–ü—Ä–æ–µ–∫—Ç –ê", "–ü—Ä–æ–µ–∫—Ç –ë", "–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∑–∞–¥–∞—á–∏"]

# –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ {user_id: {project, start_time}}
active_sessions = {}

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π
DATA_FILE = "sessions.json"

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
def save_session(user_id, project, start_time):
    data = []
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    data.append({
        "user_id": user_id,
        "project": project,
        "start_time": start_time,
        "end_time": None
    })
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
def end_session(user_id):
    if not os.path.exists(DATA_FILE):
        return 0
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        data = json.load(f)
    total_seconds = 0
    for session in data:
        if session["user_id"] == user_id and session["end_time"] is None:
            session["end_time"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            # –ü–æ–¥—Å—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            start_dt = datetime.fromisoformat(session["start_time"])
            end_dt = datetime.now()
            total_seconds += int((end_dt - start_dt).total_seconds())
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    return total_seconds

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
def project_keyboard():
    kb = InlineKeyboardMarkup()
    for p in PROJECTS:
        kb.add(InlineKeyboardButton(text=p, callback_data=f"proj:{p}"))
    return kb

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç üëã\n–Ø –ø–æ–º–æ–≥—É —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ—ë –≤—Ä–µ–º—è –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º.",
        reply_markup=main_kb
    )

@dp.message_handler(lambda msg: msg.text == "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É")
async def start_work(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:", reply_markup=project_keyboard())

@dp.callback_query_handler(lambda c: c.data.startswith("proj:"))
async def process_project(callback: types.CallbackQuery):
    project = callback.data.split(":", 1)[1]
    user_id = callback.from_user.id
    start_time = datetime.now().isoformat(timespec='seconds')
    active_sessions[user_id] = {"project": project, "start_time": start_time}
    save_session(user_id, project, start_time)
    await callback.answer(f"–ù–∞—á–∞–ª —Ä–∞–±–æ—Ç—É –Ω–∞–¥ '{project}'")
    await callback.message.edit_text(f"‚úÖ –°–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞–µ—à—å –Ω–∞–¥ '{project}' —Å {start_time}")

@dp.message_handler(lambda msg: msg.text == "–ú–æ–π –æ—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
async def today_report(message: types.Message):
    if not os.path.exists(DATA_FILE):
        await message.answer("–î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        data = json.load(f)
    user_sessions = [s for s in data if s["user_id"] == message.from_user.id]
    if not user_sessions:
        await message.answer("–¢—ã –µ—â—ë –Ω–µ –Ω–∞—á–∏–Ω–∞–ª —Ä–∞–±–æ—Ç—É —Å–µ–≥–æ–¥–Ω—è.")
        return
    report = ""
    for s in user_sessions:
        report += f"{s['project']}: {s['start_time']} ‚Äî {s.get('end_time','–í –ø—Ä–æ—Ü–µ—Å—Å–µ')}\n"
    await message.answer(report)

@dp.message_handler(lambda msg: msg.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–µ–Ω—å")
async def finish_day(message: types.Message):
    user_id = message.from_user.id
    total_seconds = end_session(user_id)
    hours = total_seconds // 3600
    minutes = (total_seconds % 3600) // 60
    await message.answer(f"‚úÖ –î–µ–Ω—å –∑–∞–≤–µ—Ä—à—ë–Ω. –í—Å–µ–≥–æ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: {hours} —á {minutes} –º–∏–Ω.")

# Web-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render health-check
def run_web():
    app = Flask(__name__)
    @app.route("/")
    def index():
        return "OK"
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)

if __name__ == "__main__":
    t = threading.Thread(target=run_web)
    t.start()
    executor.start_polling(dp, skip_updates=True)
