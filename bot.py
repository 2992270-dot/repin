import os
import json
from datetime import datetime
from aiogram import Bot, Dispatcher, F
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup, Message
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

TOKEN = os.getenv("TOKEN")
if not TOKEN:
    print("ERROR: TOKEN not set")
    exit(1)

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

DATA_FILE = "sessions.json"
PROJECTS = ["–ü—Ä–æ–µ–∫—Ç –ê", "–ü—Ä–æ–µ–∫—Ç –ë", "–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∑–∞–¥–∞—á–∏"]

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
kb_builder = ReplyKeyboardBuilder()
kb_builder.add(KeyboardButton(text="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"))
kb_builder.add(KeyboardButton(text="–ú–æ–π –æ—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è"))
kb_builder.add(KeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–µ–Ω—å"))
main_kb = kb_builder.as_markup(resize_keyboard=True)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
def save_session(user_id, project, start_time):
    data = []
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    data.append({
        "user_id": user_id,
        "project": project,
        "start_time": start_time,
        "end_time": None
    })
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
def end_session(user_id):
    if not os.path.exists(DATA_FILE):
        return 0
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        data = json.load(f)
    total_seconds = 0
    for session in data:
        if session["user_id"] == user_id and session["end_time"] is None:
            session["end_time"] = datetime.now().isoformat(timespec='seconds')
            start_dt = datetime.fromisoformat(session["start_time"])
            end_dt = datetime.now()
            total_seconds += int((end_dt - start_dt).total_seconds())
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    return total_seconds

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
def project_keyboard():
    kb = InlineKeyboardBuilder()
    for p in PROJECTS:
        kb.button(text=p, callback_data=f"proj:{p}")
    return kb.as_markup()

# –•–µ–Ω–¥–ª–µ—Ä—ã
@dp.message(Command("start"))
async def start_cmd(msg: Message):
    await msg.answer("–ü—Ä–∏–≤–µ—Ç üëã\n–Ø –ø–æ–º–æ–≥—É —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ—ë –≤—Ä–µ–º—è –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º.", reply_markup=main_kb)

@dp.message(F.text == "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É")
async def start_work(msg: Message):
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:", reply_markup=project_keyboard())

@dp.callback_query(lambda c: c.data.startswith("proj:"))
async def process_project(callback):
    project = callback.data.split(":", 1)[1]
    user_id = callback.from_user.id
    start_time = datetime.now().isoformat(timespec='seconds')
    save_session(user_id, project, start_time)
    await callback.message.edit_text(f"‚úÖ –°–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞–µ—à—å –Ω–∞–¥ '{project}' —Å {start_time}")
    await callback.answer()

@dp.message(F.text == "–ú–æ–π –æ—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
async def today_report(msg: Message):
    if not os.path.exists(DATA_FILE):
        await msg.answer("–î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        data = json.load(f)
    user_sessions = [s for s in data if s["user_id"] == msg.from_user.id]
    if not user_sessions:
        await msg.answer("–¢—ã –µ—â—ë –Ω–µ –Ω–∞—á–∏–Ω–∞–ª —Ä–∞–±–æ—Ç—É —Å–µ–≥–æ–¥–Ω—è.")
        return
    report = ""
    for s in user_sessions:
        report += f"{s['project']}: {s['start_time']} ‚Äî {s.get('end_time','–í –ø—Ä–æ—Ü–µ—Å—Å–µ')}\n"
    await msg.answer(report)

@dp.message(F.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–µ–Ω—å")
async def finish_day(msg: Message):
    user_id = msg.from_user.id
    total_seconds = end_session(user_id)
    hours = total_seconds // 3600
    minutes = (total_seconds % 3600) // 60
    await msg.answer(f"‚úÖ –î–µ–Ω—å –∑–∞–≤–µ—Ä—à—ë–Ω. –í—Å–µ–≥–æ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: {hours} —á {minutes} –º–∏–Ω.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))
